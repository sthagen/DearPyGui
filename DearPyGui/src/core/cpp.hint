// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984

#define MV_REGISTER_WIDGET(x, y, z, w) class x;\
template<> struct mvItemTypeMap<(int)mvAppItemType::x>\
{typedef x type;static constexpr const int flags = y;static constexpr const StorageValueTypes value_type = z;static constexpr const int target = w;};\
template<>struct mvItemTypeReverseMap<class x>{static constexpr mvAppItemType type = mvAppItemType::x;};

#define MV_APPLY_WIDGET_REGISTRATION(x, parser)\
static constexpr const long s_internal_type = (long)x;\
static constexpr const char* const s_internal_id = #x;\
static constexpr const char* const s_command = #parser;\
mvAppItemType getType() const override { return x; }\
int getTarget() const override { return mvItemTypeMap<(int)x>::target; }\
int getDescFlags() const override { return mvItemTypeMap<(int)x>::flags; }\
StorageValueTypes getValueType() const override { return mvItemTypeMap<(int)x>::value_type; }\
static PyObject* parser(PyObject* self, PyObject* args, PyObject* kwargs)\
{\
	static int i = 0; i++;\
	std::string name = std::string(std::string("$$DPG_") + s_internal_id + std::to_string(i));\
	auto [parent, before] = mvAppItem::GetNameFromArgs(name, args, kwargs);\
	auto item = CreateRef<mvItemTypeMap<(int)x>::type>(name);\
	item->checkArgs(args, kwargs);\
	item->handleSpecificRequiredArgs(args);\
	item->handleSpecificPositionalArgs(args);\
	item->handleKeywordArgs(kwargs);\
	if(mvApp::GetApp()->getItemRegistry().addItemWithRuntimeChecks(item, parent.c_str(), before.c_str()))\
	{\
		if (mvAppItem::DoesItemHaveFlag(item.get(), MV_ITEM_DESC_CONTAINER))\
			mvApp::GetApp()->getItemRegistry().pushParent(item);\
	}\
	return ToPyString(name);\
}\
static PyMethodDef GetMethodDefinition(){return { s_command, (PyCFunction)parser, METH_VARARGS | METH_KEYWORDS, mvApp::GetApp()->getParsers()[s_command].getDocumentation() };}


#define MV_CREATE_EXTRA_COMMAND(x) static PyObject* x(PyObject* self, PyObject* args, PyObject* kwargs)
#define MV_START_EXTRA_COMMANDS static void FillExtraCommands(std::vector<PyMethodDef>& methods){ 
#define MV_ADD_EXTRA_COMMAND(x) methods.push_back({ #x, (PyCFunction)x, METH_VARARGS | METH_KEYWORDS, mvApp::GetApp()->getParsers()[#x].getDocumentation() });
#define MV_END_EXTRA_COMMANDS }

#define MV_START_GENERAL_CONSTANTS public: static const std::vector<std::pair<std::string, long>>& GetGeneralConstants()\
{static std::vector<std::pair<std::string, long>> constants ={

#define MV_END_GENERAL_CONSTANTS };return constants;}

#define MV_START_COLOR_CONSTANTS public: static const std::vector<std::tuple<std::string, long, mvColor, mvColor>>& GetColorConstants()\
{static std::vector<std::tuple<std::string, long, mvColor, mvColor>> constants ={

#define MV_END_COLOR_CONSTANTS };return constants;}
#define MV_START_STYLE_CONSTANTS public: static const std::vector<std::tuple<std::string, long, float, float>>& GetStyleConstants()\
{static std::vector<std::tuple<std::string, long, float, float>> constants ={

#define MV_END_STYLE_CONSTANTS };return constants;}
#define MV_ADD_GENERAL_CONSTANT(x) {#x, x}
#define MV_CREATE_CONSTANT_PAIR(x, y) {#x, x, y, y}
#define MV_ADD_CONSTANT(x, y, z) {#x, x, y, z}
#define MV_ADD_CONSTANT_F(x, y, z) {#x, x, (float)y, (float)z}
#define MV_ENCODE_CONSTANT(z, i) s_internal_type*1000L+z*10L+i
#define MV_CREATE_CONSTANT(y, z, i) static constexpr const long y = MV_ENCODE_CONSTANT(z, i);
