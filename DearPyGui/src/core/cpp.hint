// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984

#define MV_REGISTER_WIDGET(x) class x;\
template<> struct mvItemType<(int)mvAppItemType::x> { typedef x type; };

#define MV_APPITEM_TYPE(x, parser)public:\
static constexpr const long s_internal_type = (long)x;\
mvAppItemType getType() const override { return x; }\
std::string getStringType() const override { return std::string(#x); }\
std::string getParserCommand() const override { return parser; }

#define MV_START_COLOR_CONSTANTS public: static const std::vector<std::tuple<std::string, long, mvColor>>& GetColorConstants()\
        {static std::vector<std::tuple<std::string, long, mvColor>> constants ={
#define MV_END_COLOR_CONSTANTS };return constants;}
#define MV_START_STYLE_CONSTANTS public: static const std::vector<std::tuple<std::string, long, int, int>>& GetStyleConstants()\
        {static std::vector<std::tuple<std::string, long, int, int>> constants ={
#define MV_END_STYLE_CONSTANTS };return constants;}
#define MV_CREATE_CONSTANT_PAIR(x, y) {#x, x, y}
#define MV_CREATE_CONSTANT_TUPLE(x, y, z) {#x, x, y, z}
#define MV_CREATE_THEME_CONSTANT(y, z, i) static constexpr const long y = s_internal_type*1000L+z*10L+i;
